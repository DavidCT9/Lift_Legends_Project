/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { Group } from 'three';
import { useFrame } from '@react-three/fiber';
import { useControls } from 'leva';
import * as THREE from 'three';


interface AvatarProps {
  animation: string;
}

export default function Avatar(props: AvatarProps) {
  const { animation } = props;

  const group = useRef<Group>(null); //  modification to: const group = useRef();
  const { nodes, materials } = useGLTF('models/66eca76737ac02dc87aaac28.glb')

  const { headFollow, cursorFollow } = useControls({
    headFollow: false,
    cursorFollow: false
  })

  const { animations: offensiveIdle } = useFBX("animations/OffensiveIdle.fbx")
  const { animations: backSquat } = useFBX("animations/BackSquat.fbx")
  const { animations: warmingUp } = useFBX("animations/WarmingUp.fbx")
  const { animations: situps } = useFBX("animations/Situps.fbx")

  offensiveIdle[0].name = "offensiveIdle";
  backSquat[0].name = "backSquat";
  warmingUp[0].name = "warmingUp";
  situps[0].name = "situps";



  const { actions } = useAnimations([offensiveIdle[0], backSquat[0], warmingUp[0], situps[0]], group);

  useEffect(() => {
    if (actions[animation]) {
      // Only fade in if the animation is not already playing
      if (!actions[animation].isRunning()) {
        actions[animation].fadeIn(0.5).play();
      }
    }

    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation, actions]);

  useFrame((state) => {
    if (headFollow) {
      group.current?.getObjectByName("Head")?.lookAt(state.camera.position);
    }
    if (cursorFollow) {
      const cursorTarget = new THREE.Vector3(state.pointer.x, state.pointer.y, 2)
      group.current?.getObjectByName("Spine2")?.lookAt(cursorTarget);
    }
  });

  return (
    <group {...props} ref={group} dispose={null} >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        frustumCulled={false}
      />
    </group>
  )
}

useGLTF.preload('models/66eca76737ac02dc87aaac28.glb')